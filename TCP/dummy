#include <iostream>
#include <cstring>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

enum packetType {
    REQUEST,
    PROVIDE,
    ABORT

};
enum packetSubtype {
    CAPABILITIES,
    ASSISTANCE_DATA,
    LOCATION_INFO,
    CERTIFICATE,
    ERROR,
    FATAL
};
struct CustomPacket {
    uint8_t flag;
    uint16_t dataSize;
    uint16_t packetLength;
    packetType packet_type;
   packetSubtype packet_subtype;
    std::string message;
    uint8_t data=message.size()+1;

};
void receiveResponse(int sockfd, CustomPacket& responsePacket) {
    ssize_t received_bytes = recv(sockfd, &responsePacket, sizeof(CustomPacket), 0);
    if (received_bytes < 0) {
        perror("Error receiving data");
    } else {
        std::cout << "Received " << received_bytes << " bytes." << std::endl;
    }
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("Error creating socket");
        return 1;
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);
    server_addr.sin_addr.s_addr = inet_addr("10.5.61.52");

    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Error connecting to server");
        close(sockfd);
        return 1;
    }

    CustomPacket packet;
    packet.flag = 1;
    packet.dataSize = htons(10);
    packet.packetLength = htons(sizeof(CustomPacket));
    packet.packetType = 2;
    packet.packetSubtype = 3;
    strcpy(packet.data, "Hello");

    ssize_t sent_bytes = send(sockfd, &packet, sizeof(CustomPacket), 0);
    if (sent_bytes < 0) {
        perror("Error sending data");
        close(sockfd);
        return 1;
    }

    std::cout << "Sent " << sent_bytes << " bytes." << std::endl;

CustomPacket responsePacket;
    receiveResponse(sockfd, responsePacket);
std::cout << "Received Packet:" << std::endl;
    std::cout << "Flag: " << (int)responsePacket.flag << std::endl;
    std::cout << "Data Size: " << ntohs(responsePacket.dataSize) << std::endl;
    std::cout << "Packet Length: " << ntohs(responsePacket.packetLength) << std::endl;
    std::cout << "Packet Type: " << (int)responsePacket.packet_type << std::endl;
    std::cout << "Packet Subtype: " << (int)responsePacket.packet_subtype << std::endl;
    std::cout << "Received Data: " << responsePacket.data << std::endl

    close(sockfd);

    return 0;
}
