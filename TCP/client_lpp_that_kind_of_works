#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <unistd.h>
#include <string.h>
#include <string>
#include <arpa/inet.h>

int serverSocket = socket(AF_INET, SOCK_STREAM, 0);
int clientSocket = socket(AF_INET, SOCK_STREAM, 0);

enum PacketType
{
    REQUEST=1,
    PROVIDE,
    ABORT
};

enum PacketSubType
{
    CAPABILITIES=10,
    ASSISTANCE_DATA,
    LOCATION_INFO,
    CERTIFICATE,
    ERROR,
    FATAL
};

struct PacketHeader
{
    uint16_tsourcePort;
    uint16_tdestPort;
    int sequenceNumber;
    std::string data;
    int flag;
    uint32_t dataSize;
    uint32_t packetLength;
    PacketType packetType;
    PacketSubType packetSubType;
    int packetID;
};

struct SubPacket
{
    PacketHeader header;
};

struct Packet
{
    PacketHeader header;
    SubPacket subPacket;

};


Packet generatePacket(PacketType type, PacketSubType subType, int packetID)
{
    Packet packet;
    packet.header.sourcePort = htons(5000); //add port number
    packet.header.destPort = htons(5000); // add port number for receiving end.
    packet.header.sequenceNumber = packetID;
    packet.header.data = "Data";
    packet.header.flag = 0;
    packet.header.dataSize = packet.header.data.size();
    packet.header.packetLength = sizeof(Packet);
    packet.header.packetType = type;
    packet.header.packetSubType = subType;
    packet.header.packetID = packetID;

    SubPacket subPacket;
    subPacket.header = packet.header;
    packet.subPacket.header = packet.header;

    return packet;
}



Packet sendLPP(PacketType type, PacketSubType subType, int packetID)
{

    Packet provide_locationinfo;
    provide_locationinfo.header.packetType=REQUEST;
    provide_locationinfo.header.packetSubType=ASSISTANCE_DATA;
    provide_locationinfo.header.data="Data";
    provide_locationinfo.header.dataSize=sizeof(provide_locationinfo.header.data);
    provide_locationinfo.header.sourcePort=htons(5000);
    provide_locationinfo.header.destPort=htons(5000);
    provide_locationinfo.header.flag=0;
    provide_locationinfo.header.dataSize = provide_locationinfo.header.data.size();

    return provide_locationinfo;
    //Packet PacketHeader PacketType request=REQUEST;
    //acket SubPacket PacketHeader PacketSubType assistance=ASSISTANCE_DATA;

}

void handleRead(int clientSocket)
{
    int packetTypeID, packetSubTypeID, packetID;
    recv(clientSocket, &packetTypeID, sizeof(packetTypeID), 0);
    recv(clientSocket, &packetSubTypeID, sizeof(packetSubTypeID), 0);
    recv(clientSocket, &packetID, sizeof(packetID), 0);

    PacketType type = static_cast<PacketType>(packetTypeID);
    PacketSubType subType = static_cast<PacketSubType>(packetSubTypeID);

    Packet packetToSend;

    switch (type)
    {
    case PacketType::ABORT:
        break;
    case PacketType::PROVIDE:
        switch (subType)
        {
        case PacketSubType::CAPABILITIES:
            packetToSend = generatePacket(PacketType::REQUEST, PacketSubType::LOCATION_INFO, packetID);
            break;
        case PacketSubType::LOCATION_INFO:
            packetToSend = generatePacket(PacketType::PROVIDE, PacketSubType::CERTIFICATE, packetID);
            break;
        case PacketSubType::ASSISTANCE_DATA:
        case PacketSubType::CERTIFICATE:
        case PacketSubType::ERROR:
        case PacketSubType::FATAL:
            packetToSend = generatePacket(PacketType::ABORT, PacketSubType::ERROR, packetID);
            break;
        }
        break;
    case PacketType::REQUEST:
        switch (subType)
        {
        case PacketSubType::CAPABILITIES:
        case PacketSubType::LOCATION_INFO:
            packetToSend = generatePacket(PacketType::ABORT, PacketSubType::ERROR, packetID);
            break;
        case PacketSubType::ASSISTANCE_DATA:
            packetToSend = generatePacket(PacketType::PROVIDE, PacketSubType::ASSISTANCE_DATA, packetID);
            break;
        case PacketSubType::CERTIFICATE:
        case PacketSubType::ERROR:
        case PacketSubType::FATAL:
            packetToSend = generatePacket(PacketType::ABORT, PacketSubType::ERROR, packetID);
            break;
        }
        break;
    }

   // sendPacket(clientSocket, packetToSend); //when the server gets one of these packets, it will send a packet based on the packet recieved
}

int client()
{
    if (clientSocket == -1)
    {
        std::cout << "Failed to create socket" << std::endl;
        return -1;
    }

    struct sockaddr_in server_address;

    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(5000);
    server_address.sin_addr.s_addr = inet_addr("10.5.61.52");

    connect(clientSocket, (struct sockaddr*)&server_address, sizeof(server_address));



while (true) {
        std::string message;
        std::cout << "Enter a message to send: ";
        std::cin >> message;

        Packet packetToSend = generatePacket(PacketType::REQUEST, PacketSubType::ASSISTANCE_DATA, 0);
        send(clientSocket, &packetToSend, sizeof(packetToSend), 1);

        }

    return 0;
}

int main()
{


    client();


    return 0;
}
