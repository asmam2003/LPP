#include <iostream>
#include <cstring>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

enum packetType {
    REQUEST = 0,
    PROVIDE = 1,
    ABORT = 2

};
enum packetSubtype {
    CAPABILITIES = 0,
    ASSISTANCE_DATA = 1,
    LOCATION_INFO = 2,
    CERTIFICATE = 3,
    ERROR = 4,
    FATAL = 5
};

struct CustomPacket {
    uint8_t flag;
    uint16_t dataSize;
    uint16_t packetLength;
    packetType packet_type;
    packetSubtype packet_subtype;
    char data[256];  
};

void receiveResponse(int client, CustomPacket& responsePacket) {
    ssize_t received_bytes = recv(client, &responsePacket, sizeof(CustomPacket), 0);
    if (received_bytes < 0) {
        std:: cout << "Error receiving data";
    } else {
        std::cout << "Received " << received_bytes << " bytes." << std::endl;
    }
}

void sendPacket(int server, const CustomPacket& packet) {
    ssize_t sent_bytes = send(server, &packet, sizeof(CustomPacket), 0);
    if (sent_bytes < 0) {
        std::cout << "Error sending data";
    } else {
        std::cout << "Sent " << sent_bytes << " bytes." << std::endl;
    }
}

void handlePacket(CustomPacket* receivedPacket, int server) {
CustomPacket response
    switch (receivedPacket->packet_type) {
        case REQUEST:
            switch (receivedPacket->packet_subtype) {
                case ASSISTANCE_DATA: 
                   response.flag = 1;
                    strcpy(response.data, "Assistance");  
                    response.dataSize = strlen(response.data);
                    response.packetLength = sizeof(response);
                    response.packet_type = PROVIDE;
                    response.packet_subtype = ASSISTANCE_DATA;

                    sendPacket(server, responsePacket);
                break;
                case ERROR: 
                    response.flag = 0;
                    strcpy(response.data, "error"); 
                    response.dataSize = strlen(response.data);
                    response.packetLength = sizeof(response);
                   response.packet_type = PROVIDE;
                    response.packet_subtype = ERROR;

                    sendPacket(server, response);
                break;
            case FATAL:
                    response.flag = 1;
                    strcpy(response.data, "Aborting");  
                    response.dataSize = strlen(response.data);
                    response.packetLength = sizeof(response);
                    response.packet_type = ABORT;
                    response.packet_subtype = ERROR;

                    sendPacket(server, response);
            break;
        case CERTIFICATE:
                    response.flag = 1;
                    strcpy(response.data, "sending certificate");  
                    response.dataSize = strlen(response.data);
                    response.packetLength = sizeof(response);
                    response.packet_type = REQUEST;
                    response.packet_subtype = CAPABILITIES;

        sendPacket(server, response);
        break;
    case LOCATION_INFO:
                response.flag = 0;
                    strcpy(response.data, "forbidden request"); 
                    response.dataSize = strlen(response.data);
                    response.packetLength = sizeof(response);
                   response.packet_type = PROVIDE;
                    response.packet_subtype = ERROR;

        sendPacket(server, response);
        break;

    }
    break;

int main() {
    int client;
    struct sockaddr_in server_addr;

    client = socket(AF_INET, SOCK_STREAM, 0);
    if (client < 0) {
        std:: cout << "Error creating socket" << std::endl;
        return 1;
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);
    server_addr.sin_addr.s_addr = inet_addr("10.5.61.52");  

    connect(client, (struct sockaddr*)&server_addr, sizeof(server_addr));

    CustomPacket packet;
    packet.flag = 1;
    strcpy(packet.data, "req");  
    packet.dataSize = strlen(packet.data);
    packet.packetLength = sizeof(CustomPacket);
    packet.packet_type = REQUEST;
    packet.packet_subtype = ASSISTANCE_DATA;

    ssize_t sent_bytes = send(client, &packet, sizeof(CustomPacket), 0);
    if (sent_bytes < 0) {
        std::cout << "Error sending packet";
        close(client);
        return 1;
    }

    std::cout << "Sent " << sent_bytes << " bytes." << std::endl;
    CustomPacket responsePacket;
    receiveResponse(client, responsePacket);
    std::cout << "Received Packet:" << std::endl;
    std::cout << "Flag: " << responsePacket.flag << std::endl;
    std::cout << "Data: " << responsePacket.data << std::endl;
    std::cout << "Data Size: " << responsePacket.dataSize << std::endl;
    std::cout << "Packet Length: " << responsePacket.packetLength << std::endl;
    std::cout << "Packet Type: " << responsePacket.packet_type << std::endl;
    std::cout << "Packet Subtype: " << responsePacket.packet_subtype << std::endl;
    handlePacket(&receivedPacket, client);

    close(client);

    return 0;
}
