#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <unistd.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <string.h>
#include <string>

class LPP server {
private: 
int serverSocket;
int client_socket;



};

struct MyPacket {
    // Header information
    int sourcePort;
    int destinationPort;
    // ... other header fields

    // Payload data
    char payload[1024];  // Assuming maximum payload size is 1024 bytes

    // Constructor to initialize header fields
    MyPacket(int srcPort, int destPort) : sourcePort(srcPort), destinationPort(destPort) {
        // Additional initialization if needed
    }

    // You can add more methods/functions to manipulate the packet if necessary
};

void HandlePacket(int socket, MyPacket& packet, struct sockaddr fromAddr) {
    // Access packet fields
    int sourcePort = packet.sourcePort;
    int destinationPort = packet.destinationPort;
    const char* payloadData = packet.payload;

    // Code to handle the received packet
    // ...
}

int main() {
    // Create a packet
    MyPacket packet(8080, 12345);

    // Set payload data
    strcpy(packet.payload, "Hello, this is the payload!");

    // Usage example: Call HandlePacket
    struct sockaddr clientAddr; // Assuming this is properly initialized
    HandlePacket(1234, packet, clientAddr);

    return 0;
}
int serverSocket= socket(AF_INET, SOCK_STREAM, 0);
int* serverSocket = new int;
*serverSocket = socket(AF_INET, SOCK_STREAM, 0);


void 
LppServer::HandlePacket(*serverSocket, Ptr<Packet> packet, Address from)
{
    LppHeader header;
    packet->PeekHeader(header);
    uint8_t flag = 0;
   if ( header.GetFlag() != 0)
	flag = header.GetFlag()-1;
   

    LppHeader::packet_type type = header.GetPacketType();
    LppHeader::packet_subtype subtype = header.GetPacketSubType();
    packet->RemoveAllPacketTags ();
    packet->RemoveAllByteTags ();
    switch(type)
    {
	case LppHeader::packet_type::ABORT:
	      m_socket->Close ();
      	      m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
	      break;
	case LppHeader::packet_type::PROVIDE:
         switch(subtype)
         {
		case LppHeader::packet_subtype::CAPABILITIES:
                     header.SendLppPacket(socket, LppHeader::packet_type::REQUEST, LppHeader::packet_subtype::LOCATION_INFO, from);
		     break;
		case LppHeader::packet_subtype::LOCATION_INFO:
                     header.SendLppPacket(socket, LppHeader::packet_type::PROVIDE, LppHeader::packet_subtype::CERTIFICATE, from);
                     break;
                case LppHeader::packet_subtype::ASSISTANCE_DATA:
                case LppHeader::packet_subtype::CERTIFICATE:
                case LppHeader::packet_subtype::ERROR:
                case LppHeader::packet_subtype::FATAL: 
		     header.SendLppPacket(socket, LppHeader::packet_type::ABORT, LppHeader::packet_subtype::ERROR, from);  
    		      break;
          }
	  break;
	 case LppHeader::packet_type::REQUEST:
           switch(subtype)
           {
		case LppHeader::packet_subtype::CAPABILITIES:
		case LppHeader::packet_subtype::LOCATION_INFO:
                     header.SendLppPacket(socket, LppHeader::packet_type::ABORT, LppHeader::packet_subtype::ERROR, from);
                     break;
                case LppHeader::packet_subtype::ASSISTANCE_DATA:
                     header.SendLppPacket(socket, LppHeader::packet_type::PROVIDE, LppHeader::packet_subtype::ASSISTANCE_DATA, from, flag);
    		     break;
                case LppHeader::packet_subtype::CERTIFICATE:
                     header.SendLppPacket(socket, LppHeader::packet_type::REQUEST, LppHeader::packet_subtype::CAPABILITIES, from);
                     break;
                case LppHeader::ERROR:
                case LppHeader::FATAL: 
                     header.SendLppPacket(socket, LppHeader::packet_type::ABORT, LppHeader::packet_subtype::ERROR, from);
    		      break;
        

           }

     } 	

    int client_socket = socket(AF_INET, SOCK_STREAM, 0);

    int* serverSocket = new int;
    *serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    int server() {
    if (serverSocket == -1) {
        std::cout << "Failed to create socket" << std::endl;
        return -1;
    }

    sockaddr_in server_address, client_address;
    socklen_t client_length = sizeof(client_address);

    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(5000); // Port number, change if needed

    bind(serverSocket, (struct sockaddr*)&server_address, sizeof(server_address));
    listen(serverSocket, 5);

    int client_socket = accept(serverSocket, (struct sockaddr*)&client_address, &client_length);
    std::cout << "Client connected"<<std::endl;

    while (true) {
    char buffer[1024];


    int bytesReceived = recv(client_socket, buffer, sizeof(buffer), 0); // the message from client
        if (bytesReceived <= 0) {
        std::cout << "Client disconnected." << std::endl;
        break;
}

    std::cout << "Client: " << buffer << std::endl;
    if (buffer=="exit") {
        std::cout << "Client requested to exit." << std::endl;
        break;
    }
    std::string response;
    std::cout << "Server: ";
    std::cin >> response;
    send(client_socket, response.c_str(), response.size(), 0);
        if (response=="exit") {
        std::cout << "Server exiting." << std::endl;
        break;
    }
}


    close(client_socket);
    close(serverSocket);

    return 0;
}


    int main() {


        server();

    return 0;
}


#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <unistd.h>
#include <string.h>
#include <string>
#include <vector>
#include <cstring>
#include <netinet/in.h>

enum PacketType {
    REQUEST = 1,
    RESPONSE
};

enum PacketSubType {
    SUB_PACKET_1 = 1,
    SUB_PACKET_2,
    SUB_PACKET_3
};

struct PacketHeader {
    int sourcePort;
    int destPort;
    int sequenceNumber;
    int dataSize;
    int packetLength;
    PacketType packetType;
    PacketSubType packetSubType;
    int packetID;
};

struct SubPacket {
    PacketHeader header;
    std::string data;
};

struct Packet {
    PacketHeader header;
    std::vector<SubPacket> subPackets;
};


const char* SERVER_IP = "10.5.61.52";
const int PORT = 8080;

void sendRequest(int clientSocket, Packet requestPacket) {
    send(clientSocket, &requestPacket, sizeof(requestPacket), 0);
}

void receiveResponse(int clientSocket) {
    Packet responsePacket;
    recv(clientSocket, &responsePacket, sizeof(responsePacket), 0);

    for (const auto& subPacket : responsePacket.subPackets) {
        std::cout << "Received Sub-Packet Type: " << subPacket.header.packetSubType << ", Data: " << subPacket.data << std::endl;
    }
}

int main() {
    int clientSocket;
    struct sockaddr_in serverAddr;

    // Create socket
    clientSocket = socket(AF_INET, SOCK_STREAM, 0);

    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    serverAddr.sin_addr.s_addr = inet_addr(SERVER_IP);

    // Connect to server
    connect(clientSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr));

    Packet requestPacket;
    requestPacket.header.packetType = REQUEST;

    for (int i = 1; i <= 3; ++i) {
        SubPacket subPacket;
        subPacket.header.packetSubType = static_cast<PacketSubType>(i);
        requestPacket.subPackets.push_back(subPacket);
    }

    // Send requests and receive responses
    sendRequest(clientSocket, requestPacket);
    receiveResponse(clientSocket);

    close(clientSocket);
    return 0;
}

