#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <unistd.h>
#include <string.h>
#include <string>

int serverSocket = socket(AF_INET, SOCK_STREAM, 0);
int clientSocket = socket(AF_INET, SOCK_STREAM, 0);

enum  PacketType {
    REQUEST = 1,
    PROVIDE,
    ABORT
};

enum PacketSubType {
    CAPABILITIES = 10,
    ASSISTANCE_DATA,
    LOCATION_INFO,
    CERTIFICATE,
    ERROR,
    FATAL
};

struct PacketHeader {
    int sourcePort;
    int destPort;
    int sequenceNumber;
    std::string data;
    int flag;
    int dataSize;
    int packetLength;
    PacketType packetType;
    PacketSubType packetSubType;
    int packetID;
};

struct SubPacket {
    PacketHeader header;
};

struct Packet {
    PacketHeader header;
    SubPacket subPacket;


};



Packet generatePacket(PacketType type, PacketSubType subType, int packetID) {
    Packet packet;
    packet.header.sourcePort = htons(5000);
    packet.header.destPort = htons(5000);
    packet.header.sequenceNumber = packetID;
    packet.header.data = "Data";
    packet.header.flag = 0;
    packet.header.dataSize = packet.header.data.size();
    packet.header.packetLength = sizeof(Packet);
    packet.header.packetType = type;
    packet.header.packetSubType = subType;
    packet.header.packetID = packetID;
    SubPacket subPacket;
    subPacket.header = packet.header;
    packet.subPacket.header = packet.header;

    return packet;
}



void handleRead(int clientSocket) {

   // recv(clientSocket, buffer, sizeof(PacketHeader), 0);

   // Packet receivedPacket = sizeof(PacketHeader);
    int packetTypeID, packetSubTypeID, packetID;
    recv(clientSocket, &packetTypeID, sizeof(packetTypeID), 0);
    recv(clientSocket, &packetSubTypeID, sizeof(packetSubTypeID), 0);
    recv(clientSocket, &packetID, sizeof(packetID), 0);

    PacketType type = static_cast<PacketType>(packetTypeID);
    PacketSubType subType = static_cast<PacketSubType>(packetSubTypeID);

    Packet packetToSend;

    switch (type) {
        case PacketType::ABORT:
            break;
        case PacketType::PROVIDE:
            switch (subType) {
                case PacketSubType::CAPABILITIES:
                    packetToSend = generatePacket(PacketType::REQUEST, PacketSubType::LOCATION_INFO, packetID);
                    break;
                case PacketSubType::LOCATION_INFO:
                    packetToSend = generatePacket(PacketType::PROVIDE, PacketSubType::CERTIFICATE, packetID);
                    break;
                case PacketSubType::ASSISTANCE_DATA:
                case PacketSubType::CERTIFICATE:
                case PacketSubType::ERROR:
                case PacketSubType::FATAL:
                    packetToSend = generatePacket(PacketType::ABORT, PacketSubType::ERROR, packetID);
                    break;
            }
            break;
        case PacketType::REQUEST:
            switch (subType) {
                case PacketSubType::CAPABILITIES:
                case PacketSubType::LOCATION_INFO:
                    packetToSend = generatePacket(PacketType::ABORT, PacketSubType::ERROR, packetID);
                    break;
                case PacketSubType::ASSISTANCE_DATA:
                        packetToSend = generatePacket(PacketType::PROVIDE, PacketSubType::ASSISTANCE_DATA, packetID);
                    break;
                case PacketSubType::CERTIFICATE:
                case PacketSubType::ERROR:
                case PacketSubType::FATAL:
                    packetToSend = generatePacket(PacketType::ABORT, PacketSubType::ERROR, packetID);
                    break;
            }
            break;
    }

   // sendPacket(clientSocket, packetToSend); //when the server gets one of these packets, it will send a packet based on the packet recieved
}


    int server() {
    if (serverSocket == -1) {
        std::cout << "Failed to create socket" << std::endl;
        return -1;
    }

    sockaddr_in server_address, client_address;
    socklen_t client_length = sizeof(client_address);
    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(5000); // Port number, change if needed

    bind(serverSocket, (struct sockaddr*)&server_address, sizeof(server_address));
    listen(serverSocket, 5);

     clientSocket=accept(serverSocket, (struct sockaddr*)&client_address, &client_length);
    std::cout << "Client connected"<<std::endl;


    while (getchar()) {
    Packet receivedPacket;
    int bytesReceived1 = recv(clientSocket, &receivedPacket, sizeof(Packet), 0); // the message from client
        if (bytesReceived1 <= 0) {
        std::cout << "Client disconnected." << std::endl;
        break;
}

    std::cout << "Packet Type: " << static_cast<int>(receivedPacket.header.packetType) << std::endl;
    std::cout << "Packet SubType: " << static_cast<int>(receivedPacket.header.packetSubType) << std::endl;

}



    close(clientSocket);


    return 0;
}


    int main() {


        server();


    return 0;
}
