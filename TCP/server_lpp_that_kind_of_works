#include <iostream>
#include <cstring>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>

enum PacketType {
    REQUEST=0,
    PROVIDE=1,
    ABORT=2
};

enum PacketSubtype {
    CAPABILITIES=0,
    ASSISTANCE_DATA=1,
    LOCATION_INFO=2,
    CERTIFICATE=3,
    ERROR=4,
    FATAL=5
};

struct CustomPacket {
    uint8_t flag;
    uint16_t dataSize;
    uint16_t packetLength;
    PacketType packet_type;
    PacketSubtype packet_subtype;
    std::string data;
};

void sendPacket(int server, const CustomPacket& packet) {
    ssize_t sent_bytes = send(server, &packet, sizeof(CustomPacket), 0);
    if (sent_bytes < 0) {
        std::cout <<"Error sending data";
    } else {
        std::cout << "Sent " << sent_bytes << " bytes." << std::endl;
    }
}

void handlePacket(CustomPacket* receivedPacket, int client) {
CustomPacket responsePacket;
    responsePacket.flag = 1;
    responsePacket.dataSize = htons(10); // Example value, change as needed
    responsePacket.packetLength = htons(sizeof(CustomPacket)); // Example value, change as needed
    responsePacket.packet_type = PROVIDE; // Example value, change as needed
    responsePacket.packet_subtype = ASSISTANCE_DATA; // Example value, change as needed
    switch (receivedPacket->packet_type) {
        case REQUEST:
            switch (receivedPacket->packet_subtype) {
            case ASSISTANCE_DATA:
            sendPacket(client, responsePacket);
            }

    break;
}
                }




int main() {
    int server, client;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    CustomPacket receivedPacket; // Added declaration

    // Create a socket
    server = socket(AF_INET, SOCK_STREAM, 0);
    if (server < 0) {
        std::cout << "Error creating socket";
        return 1;
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    bind(server, (struct sockaddr*)&server_addr, sizeof(server_addr));

    listen(server, 0);

    std::cout << "Waiting for connection" << std::endl;

    client = accept(server, (struct sockaddr*)&client_addr, &client_len);

    std::cout << "Connection established" << std::endl;

    ssize_t received_bytes = recv(client, &receivedPacket, sizeof(CustomPacket), 0);
    if (received_bytes < 0) {
        std::cout << "Error receiving data";
        close(client);
        close(server);
        return 1;
    }

    std::cout << "Received Packet:" << std::endl;
    std::cout << "Flag: " << (int)receivedPacket.flag << std::endl;
    std::cout << "Data Size: " << ntohs(receivedPacket.dataSize) << std::endl;
    std::cout << "Packet Length: " << ntohs(receivedPacket.packetLength) << std::endl;
    std::cout << "Packet Type: " << (int)receivedPacket.packet_type << std::endl;
    std::cout << "Packet Subtype: " << (int)receivedPacket.packet_subtype << std::endl;
    handlePacket(&receivedPacket, client);
    close(client);
    close(server);

    return 0;
}
